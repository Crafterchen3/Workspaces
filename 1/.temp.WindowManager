multishell.setTitle(multishell.getCurrent(), "WindowManager")
local current = term.current()
local ok, err = load("term.setBackgroundColor(colors.gray)\
term.clear()\
\
function redirect(win)\
    term.redirect(win.win)\
    term.setBackgroundColor(win.win.getBackgroundColor())\
    term.setTextColor(win.win.getTextColor())\
    term.setCursorBlink(win.win.getCursorBlink())\
    term.setCursorPos(win.win.getCursorPos())\
end\
\
function initiateWindow(win)\
    redirect(win)\
    coroutine.resume(win.thread)\
end\
\
function createWindow(x,y,w,h,file)\
    win = {}\
    win.win = window.create(cur,x,y,w,h)\
    win.thread = coroutine.create(function () shell.run(file) end)\
    initiate(win)\
    return win\
end\
\
wins = {}\
curWin = 1\
cur = term.current()\
wins[1] = createWindow(1,1,70,20,\"shell\")\
redirect(wins[curWin])\
\
--main loop\
bRunning = true\
while bRunning do\
    raw = table.pack(event.pullraw())\
    coroutine.resume(wins[1].thread,table.unpack(raw))\
    if coroutine.status(wins[1].thread) == \"dead\" then\
        bRunning = false\
    end\
end", "@WindowManager.lua", nil, _ENV)
if ok then ok, err = pcall(ok, ...) end
term.redirect(current)
term.setTextColor(term.isColour() and colours.yellow or colours.white)
term.setBackgroundColor(colours.black)
term.setCursorBlink(false)
local _, y = term.getCursorPos()
local _, h = term.getSize()
if not ok then
    printError(err)
end
if ok and y >= h then
    term.scroll(1)
end
term.setCursorPos(1, h)
if ok then
    write("Program finished. ")
end
write("Press any key to continue")
os.pullEvent('key')
